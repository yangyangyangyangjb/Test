package com.example.controller;

import com.alibaba.fastjson.JSONObject;
import com.example.entity.BankTransDetail;
import com.example.entity.JtgkDqckCsFhSjEntity;
import com.example.entity.JtgkTmckcpEntity;
import com.example.entity.Result;
import com.example.service.ClientTest;
import com.example.service.SpgtmBankTransDetailService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.io.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.Base64;
import java.util.stream.Collectors;

import static com.example.common.DeepClone.deepClone;

@RestController
@RequestMapping("/jtgk/spgtm/settlement/v1.0")
@Slf4j
public class BookController {

    @Resource
    private SpgtmBankTransDetailService spgtmBankTransDetailService;
    @Resource
    private ClientTest clientTest;
    @Resource
    private RedisTemplate redisTemplate;
    private static final String LOCK_KEY = "EM_WHYQTQJGSQ_REDIS";
    private static final long EXPIRE_TIME = 30000; // 锁的过期时间，单位为毫秒
    private static final long WAIT_TIME = 1000; // 获取锁时的等待时间，单位为毫秒

    @PostMapping("/getBankTransDetail")
    public Result getBankTransDetail(@RequestBody BankTransDetail bankTransDetail){
        log.info("银行流水通用查询接口参数controller传入:{}",bankTransDetail.toString());
        return spgtmBankTransDetailService.getBankTransDetail(bankTransDetail);
    }


    @PostMapping("/redisTest")
    public Result redisTest(@RequestBody JSONObject jsonObject) throws ParseException {



        String aaaasda = "";
        String bbbbbffwfwe= "";
        if(Objects.equals(aaaasda,bbbbbffwfwe)){
            log.info("true");
        }

        String asa= "99011131101000002060,99011131101008001771,99011131101024001134,99011131101059001347,99011131101000001841,99011131104018001514,99011131104026001276,99011131104039001838,99011131104038001767,99011131101030002362,99011131104033001360,99011131104032001386,99011131104031001488,99011131106004001889,99011131104030001074,99011131104029001209,99011131101042001805,99011131104024001429,99011131107041001186,99011131104019001639,99011131104013001611,99011131101030001886,99011131104012001815,99011131101028001890,99011131104011001945,99011131101016001502,99011131104006001511,99011131101005001098,99011131104002001487,99011131101002001266,99011131104001001761,99011131104000001001,99011131101004001147,99011131101019001212,99011131108000001895,99011131104005001058,99011131104040001925,99011131104017001389,99011131104015001949,99011131107018001397,99011131105001001722,99011131104014001251,99011131104014002420,99011131101071001635,99011131110077001962,99011131101044001108,99011131101069001199,99011131103029001895,99011131107001001239,99011131107039001629,99011131107079001735,99011131107080001346,99011131107083001200,99011131107090001356,99011131107089001640,99011131107097001043,99011131107049001180,99011131101054001551,99011131101070001236,99011131101089001208,99011131101071002405,99011131105003001485,99011131105004001229,99011131105010001214,99011131105012001541,99011131105011001721,99011131105014001445,99011131105013001274,99011131104003001800,99011131105015001907,99011131101013001965,99011131105016001409,99011131105018001252,99011131105017001107,99011131110058001990,99011131110089001661,99011131110097001587,99011131110103001937,99011131101025001246,99011131101034001092,99011131107087001839,99011131107004001312,99011131101050001816,99011131110096001866,99011131107065001995,99011131110093001356,99011131107051001543,99011131110094001370,99011131110095001149,99011131110081001381,99011131110060001477,99011131110084001221,99011131101051001656,99011131110082001077,99011131107060001610,99011131107057001335,99011131106009001248,99011131106003001003,99011131106002001248,99011131110092001493,99011131107105001640,99011131110086001171,99011131110101001356,99011131110104001560,99011131110009001478,99011131110078001352,99011131107101001016,99011131110003001318,99011131110106001170,99011131107005001180,99011131107006001137,99011131107015001201,99011131107028001592,99011131107074001466,99011131101063001348,99011131101066001554,99011131101052001920,99011131107023001587,99011131101058001392,99011131107002001637,99011131107024001260,99011131107032001303,99011131101065001649,99011131101094001101,99011131107022001848,99011131107070001738,99011131102003001777,99011131102002001195,99011131110019001883,99011131110005001601,99011131110064001996,99011131110066001479,99011131101045001121,99011131110049001664,99011131101007001001,99011131101007002690,99011131101057001468,99011131101056001421,99011131105007001742,99011131107050001568,99011131107012001704,99011131107010001727,99011131107037001862,99011131101046001942,99011131110076001310,99011131107044001286,99011131110062001182,99011131110037001162,99011131107068001176,99011131107043001705,99011131110070001489,99011131110074001630,99011131102008001651,99011131110026001959,99011131110043001057,99011131110045001788,99011131110018001156,99011131110069001816,99011131110027001522,99011131110031001209,99011131110020001356,99011131110039001045,99011131110071001275,99011131110023001753,99011131110028001500,99011131110044001231,99011131107088001979,99011131110016001364,99011131110001001972,99011131110042001824,99011131110065001077,99011131110067001242,99011131110032001751,99011131110034001147,99011131110068001869,99011131110030001837,99011131104023001573,99011131110046001132,99011131110000001493,99011131110048001916,99011131105000002246,99011131110022001644,99011131110041001878,99011131110021001961,99011131110038001194,99011131110015001025,99011131110040001967,99011131110063001535,99011131110057001224,99011131110072001325,99011131110036001763,99011131110075001975,99011131110073001839,99011131110017001515,99011131110024001767,99011131110050001116,99011131110047001254,99011131110025001932,99011131110033001018,99011131110014001373,99011131102006001767,99011131110029001568,99011131101072001474,99011131101086001386,99011131101073001260,99011131101074001655,99011131110108001191,99011131110002001534,99011131102000002178,99011131101075001320,99011131107096001905,99011131107118001276,99011131110087001351,99011131110059001355,99011131110055001160,99011131110056001845,99011131110006001966,99011131110052001595,99011131101022001711,99011131101033001332,99011131101040001783,99011131110012001145,99011131107091001758,99011131107102001753,99011131110004001915,99011131101067001502,99011131110061001518,99011131110007001091,99011131110013001408,99011131110051001356,99011131110090001340,99011131107092001164,99011131110054001629,99011131110080001114,99011131110053001498,99011131110085001931,99011131170093001854,99011131107104001640,99011131107095001123,99011131110011001699,99011131110010001895,99011131110079002590,99011131110088001755,99011131110008001486,99011131107066001573,99011131107047001792,99011131102000011500,99011131101064001262,99011131102000009634,99011131101055001324,99011131107000014130,99011131107000016741,99011131107000004010,99011131107000010040,99011131107000012260,99011131101062001320,99011131107124001010,99011131104028001924,99011131104009001258,99011131107062001823,99011131107115001988,99011131107114001370,99011131107112001615,99011131107113001643,99011131107111001148,99011131101093001905,99011131107100001744,99011131102000012569,99011131102000016752,99011131102000005128,99011131107009001494,99011131107027001753,99011131107099001549,99011131102000015013,99011131102000017495,99011131102000001226,99011131102001001132,99011131101087001113,99011131107081001106,99011131107081002111,99011131107086001328,99011131107084001262,99011131107108001041,99011131107109001650,99011131107116001774,99011131107013001055,99011131102000014277,99011131107106001227,99011131107117001537,99011131107000001314,99011131107000007248,99011131107061001214,99011131107082001652,99011131101037001034,99011131109000001295,99011131101020001632,99011131101060001241,99011131101061001300,99011131107075002405,99011131107055001072,99011131107021001328,99011131101029001317,99011131107020001526,99011131102000004943,99011131101036001135,99011131107075003431,99011131106002002837,99011131107121001820,99011131107122001790,99011131107120001821,99011131106011001971,99011131109005001553,99011131101097001629,99011131101090001699,99011131101098001617,99011131101092001327,99011131107123001930,99011131106012001661,99011131101009001925,99011131101068001025,99011131103012001109,99011131101078001182,99011131104010001433,99011131107014001542,99011131107011001546,99011131107067001989,99011131101027001750,99011131101027002547,99011131104041001134,99011131110105001242,99011131109001001896,99011131102000003221,99011131102000006856,99011131107085001429,99011131107094001609,99011131107093001726,99011131101010001293,99011131101048001246,99011131101039001481,99011131102000007689,99011131101011001849,99011131107110001651,99011131101003001985,99011131107000026573,99011131107000023700,99011131107000025916,99011131107000020530,99011131107000003572,99011131107000005150,99011131107000006413,99011131107000008330,99011131107003001799,99011131107008001732,99011131107073001447,99011131101018001531,99011131104037001449,99011131101095001647,99011131107076001076,99011131107000009653,99011131107000011760,99011131107000013789,99011131105005001863,99011131101015001307,99011131101000003273,99011131110091001367,99011131103017001259,99011131103006001211,99011131103002001845,99011131103003002696,99011131107098001754,99011131107000002855,99011131107000015859,99011131105008001496,99011131105000001857,99011131103003001286,99011131107000017951,99011131107000018227,99011131107000019062,99011131107000021621,99011131107075001791,99011131107000022938,99011131107000024974,99011131110109001258,99011131103030001537,99011131103008001431,99011131101088001660,99011131102000008487,99011131103025001641,99011131103007001453,99011131103018001654,99011131101014001362,99011131101041002256,99011131101041001540,99011131109003001926,99011131103004001962,99011131103001002868,99011131103001001063,99011131103003003689,99011131104021001354,99011131103031001428,99011131103032001164,99011131105005002016,99011131103010001257,99011131103015001722,99011131103021001167,99011131101017001661,99011131107017001652,99011131107045001066,99011131103009001771,99011131103005001092,99011131103024001027,99011131103000001004,99011131103000002143,99011131107064001855,99011131102000010452,99011131110083001210,99011131107042001245,99011131110035001219,99011131107029001150,99011131110107001825,99011131104007001143,99011131104007002200,99011131104034001490,99011131104036001351,99011131104022001655,99011131104035001685,99011131101096001843,99011131107103001761,99011131104027001175,99011131104004001405,99011131101053001706,99011131101053002471,99011131107016001955,99011131107035001434,99011131107119001768,99011131102007001256,99011131107026001854,99011131107054001109,99011131107053001087,99011131107025001480,99011131101084001546,99011131101083001390,99011131101077001681,99011131107034001717,99011131101031001510,99011131101080001018,99011131101081001370,99011131101082001023,99011131101076001781,99011131110099001646,99011131110111001829,99011131102000013443,99011131102004001751,99011131101079001469,99011131102005001973,99011131107107001895,99011131107077001946,99011131109004001397,99011131101012001681,99011131107063001388,99011131107078001078,99011131106010001368,99011131106008001190,99011131106007001603,99011131106006001366,99011131106001001247,99011131106000005197,99011131106000004939,99011131101007003111,99011131109006001673,99011131103028001433,99011131103020001690,99011131106000003773,99011131106000002024,99011131106000001597,99011131103022001610,99011131103014001623,99011131103023001183,99011131103019001735,99011131107066002537,99011131110002002898,99011131101021001977,99011131101035001186,99011131101023001513,99011131107125001582,99011131110126001013,99011131110121001311,99011131106005001103,99011131110115001581,99011131110098001391,99011132101085001111,99011131110113001511,99011131110102001826,99011131101100001411,99011131101000004974,99011131110119001081,99011131110116001514,99011131105019001701,99011131107126001268,99011131110110001504,99011131110120001260,99011131110112001156,99011131101099001190,99011131107129001531,99011131110117001138,99011131110114001984,99011131110118001740,99011131110100001772,99011131101053318364,99011131104000661534,99011131101108001350,99011131101109001493,99011131104000060511,99011131104000224545,99011131101033627593,99011131101033002239,";
        String [] aaaaa = asa.split(",");

        String assasas = "99011131101003001985,99011131107008001732,99011131107022001848,99011131108000001895,99011131109001001896,99011131107028001592,99011131105004001229,99011131105002001425,99011131107019001052,99011131104014001251,99011131107041001186,99011131101019001212,99011131101025001246,99011131104018001514,99011131103011001371,99011131107047001792,99011131101008001771,99011131101011001849,99011131104002001487,99011131107066001573,99011131101050001816,99011131103022001610,99011131101047001991,99011131101049001438,99011131107000014130,99011131107000007248,99011131107000003572,99011131107083001200,99011131106004001889,99011131106001001247,99011131101056001421,99011131110002001534,99011131101066001554,99011131103030001537,99011131107075001791,99011131110005001601,99011131107081001106,99011131107000022938,99011131110011001699,99011131107000004010,99011131102003001777,99011131110051001356,99011131110068001869,99011131101078001182,99011131110058001990,99011131110029001568,99011131110042001824,99011131110039001045,99011131107095001123,99011131110045001788,99011131107091001758,99011131110063001535,99011131110046001132,99011131104034001490,99011131110062001182,99011131107131001942,99011131101079001469,99011131110016001364,99011131102000004943,99011131101098001617,99011131110103001937,99011131110080001114,99011131110089001661,99011131101107001916,99011131105020001795,99011131107081003276,99011131107107001895,99011131106011001971,99011131101106001718,99011131110086001171,99011131101100001411,99011131101102001184,99011131101083001390,99011131110091001367,99011131110099001646,99011131104000224545,99011131101015001307,99011131101006001874,99011131107029001150,99011131107032001303,99011131101032001427,99011131105011001721,99011131101035001186,99011131101004001147,99011131103000001004,99011131107030001370,99011131103012001109,99011131103005001092,99011131104017001389,99011131103001001063,99011131101039001481,99011131101045001121,99011131103028001433,99011131107054001109,99011131101042001805,99011131103026001336,99011131107000019062,99011131107000009653,99011131107000020530,99011131106007001603,99011131107075002405,99011131103003003689,99011131101067001502,99011131101062001320,99011131107075003431,99011131110014001373,99011131102007001256,99011131101071001635,99011131110012001145,99011131110017001515,99011131107100001744,99011131110072001325,99011131107000026573,99011131110038001194,99011131105005002016,99011131107092001164,99011131107093001726,99011131101000002060,99011131107101001016,99011131110066001479,99011131101077001681,99011131110031001209,99011131102000016752,99011131110114001984,99011131110084001221,99011131107104001640,99011131110002002898,99011131107115001988,99011131107109001650,99011131110126001013,99011131107128001368,99011131101007003111,99011131101104001133,99011131110088001755,99011131107105001640,99011131110093001356,99011131107112001615,99011131107114001370,99011131110105001242,99011131107103001761,99011131107113001643,99011131101099001190,99011131107015001201,99011131105009001653,99011131107009001494,99011131107013001055,99011131107016001955,99011131107018001397,99011131107020001526,99011131105006001895,99011131104021001354,99011131101001001850,99011131107035001434,99011131103007001453,99011131101034001092,99011131107044001286,99011131107024001260,99011131101012001681,99011131101014001362,99011131103002001845,99011131103004001962,99011131104009001258,99011131107058001460,99011131101046001942,99011131104023001573,99011131107050001568,99011131103023001183,99011131103027001954,99011131101044001108,99011131107059001109,99011131104028001924,99011131107055001072,99011131104026001276,99011131101007002690,99011131107000011760,99011131107000006413,99011131107087001839,99011131103000002143,99011131107073001447,99011131104031001488,99011131101069001199,99011131107000025916,99011131107000024974,99011131101070001236,99011131107000002855,99011131101064001262,99011131101059001347,99011131107000012260,99011131110015001025,99011131104037001449,99011131110049001664,99011131110043001057,99011131110021001961,99011131101030002362,99011131102000007689,99011131110025001932,99011131110020001356,99011131101074001655,99011131103032001164,99011131102000003221,99011131110098001391,99011131110095001149,99011131104039001838,99011131110092001493,99011131110116001514,99011131110120001260,99011131110131001780,99011131101109001493,99011131101105001800,99011131110079002590,99011131110085001931,99011131110087001351,99011131107106001227,99011131101033627593,99011131107007001553,99011131107025001480,99011131105007001742,99011131107042001245,99011131101027001750,99011131105010001214,99011131104015001949,99011131107038001222,99011131107006001137,99011131107034001717,99011131103016001657,99011131104010001433,99011131107001001239,99011131101040001783,99011131104024001429,99011131105014001445,99011131107064001855,99011131107051001543,99011131103025001641,99011131107056001356,99011131103001002868,99011131107069001902,99011131101053001706,99011131101054001551,99011131101052001920,99011131110009001478,99011131106000003773,99011131110022001644,99011131110052001595,99011131110064001996,99011131101075001320,99011131106008001190,99011131105016001409,99011131110033001018,99011131102000011500,99011131110040001967,99011131110056001845,99011131110069001816,99011131110037001162,99011131102000015013,99011131102004001751,99011131101080001018,99011131110074001630,99011131101090001699,99011131101095001647,99011131110018001156,99011131101084001546,99011131101097001629,99011131110076001310,99011131110065001077,99011131101088001660,99011131110102001826,99011131110108001191,99011131107126001268,99011131107127001692,99011131110109001258,99011131107066002537,99011131110115001581,99011131110128001133,99011131101089001208,99011131101108001350,99011131110101001356,99011131110081001381,99011131110122001451,99011131110106001170,99011131110107001825,99011131110110001504,99011131110112001156,99011131101053318364,99011131101028001890,99011131107005001180,99011131107017001652,99011131107003001799,99011131105000001857,99011131105001001722,99011131104016001869,99011131105012001541,99011131107012001704,99011131107023001587,99011131103009001771,99011131104020001854,99011131103013001634,99011131101007001001,99011131101020001632,99011131101031001510,99011131107037001862,99011131101016001502,99011131101018001531,99011131104000001001,99011131104008001149,99011131104011001945,99011131107002001637,99011131101037001034,99011131101041002256,99011131107049001180,99011131109002001530,99011131101038001083,99011131107070001738,99011131107071001650,99011131101023002121,99011131107067001989,99011131104029001209,99011131107000018227,99011131107000008330,99011131107086001328,99011131106002001248,99011131107078001078,99011131107000017951,99011131106003001003,99011131102001001132,99011131110008001486,99011131110010001895,99011131110004001915,99011131107000005150,99011131106000002024,99011131101065001649,99011131110003001318,99011131110013001408,99011131102002001195,99011131110050001116,99011131110059001355,99011131110044001231,99011131101072001474,99011131101076001781,99011131102000012569,99011131110057001224,99011131102000010452,99011131107102001753,99011131109004001397,99011131110104001560,99011131102000014277,99011131110119001081,99011131102006001767,99011131101093001905,99011131107118001276,99011131110113001511,99011131107125001582,99011131110129001081,99011131105019001701,99011131110090001340,99011131106012001661,99011131101092001327,99011131101000004974,99011131110124001842,99011131101087001113,99011131107110001651,99011131106010001368,99011131101000003273,99011131107124001010,99011131107117001537,99011131107122001790,99011131107121001820,99011131107014001542,99011131107027001753,99011131105005001863,99011131107010001727,99011131107026001854,99011131107031001592,99011131107000001314,99011131103010001257,99011131101030001886,99011131107043001705,99011131104022001655,99011131101023001513,99011131104003001800,99011131104005001058,99011131109003001926,99011131104027001175,99011131107065001995,99011131103024001027,99011131104025001333,99011131107063001388,99011131107048001826,99011131107052001564,99011131107057001335,99011131107060001610,99011131101043001165,99011131107053001087,99011131101053002471,99011131103029001895,99011131101055001324,99011131107000016741,99011131105015001907,99011131106006001366,99011131110001001972,99011131110000001493,99011131107080001346,99011131104032001386,99011131101060001241,99011131107077001946,99011131101061001300,99011131106000005197,99011131110028001500,99011131102000008487,99011131110060001477,99011131110071001275,99011131110023001753,99011131110032001751,99011131105018001252,99011131170093001854,99011131110019001883,99011131110075001975,99011131110024001767,99011131110036001763,99011131103031001428,99011131104035001685,99011131101094001101,99011131110047001254,99011131101091001361,99011131110117001138,99011131110130001278,99011131110125001374,99011131107130001922,99011131101101001015,99011131110123001035,99011131107116001774,99011131107108001041,99011131101071002405,99011131107123001930,99011131110111001829,99011131104000661534,99011131104000060511,99011131101005001098,99011131109000001295,99011131105003001485,99011131101026001567,99011131107033001485,99011131103008001431,99011131107039001629,99011131107046001187,99011131102000001226,99011131105008001496,99011131104012001815,99011131101033001332,99011131103014001623,99011131101021001977,99011131101024001134,99011131107036001936,99011131107040001740,99011131103017001259,99011131103018001654,99011131103020001690,99011131103019001735,99011131103021001167,99011131101000001841,99011131107011001546,99011131101009001925,99011131101013001965,99011131103003001286,99011131107062001823,99011131104030001074,99011131104014002420,99011131105000002246,99011131107061001214,99011131107072001353,99011131107000015859,99011131110006001966,99011131107076001076,99011131107000023700,99011131101068001025,99011131107000013789,99011131104007002200,99011131101057001468,99011131107082001652,99011131104033001360,99011131107084001262,99011131107085001429,99011131110026001959,99011131107090001356,99011131102000005128,99011131107096001905,99011131102008001651,99011131105017001107,99011131102005001973,99011131104036001351,99011131102000006856,99011131110061001518,99011131110070001489,99011131101081001370,99011131104040001925,99011131102000017495,99011131107089001640,99011131107120001821,99011131110118001740,99011131110121001311,99011131101086001386,99011131104038001767,99011131110096001866,99011131110094001370,99011131101096001843,99011131107133001190,99011131107132001691,99011131101103001663,99011131107129001531,99011131106009001248,99011131110100001772,99011131110082001077,99011131107111001148,99011131101033002239,99011131101017001661,99011131101022001711,99011131107004001312,99011131107021001328,99011131104013001611,99011131107045001066,99011131101002001266,99011131104019001639,99011131101036001135,99011131103006001211,99011131101029001317,99011131103015001722,99011131101010001293,99011131104001001761,99011131104004001405,99011131104006001511,99011131104007001143,99011131101027002547,99011131103003002696,99011131105013001274,99011131107068001176,99011131101048001246,99011131101041001540,99011131107000021621,99011131101051001656,99011131107074001466,99011131106005001103,99011131110007001091,99011131101063001348,99011131106000001597,99011131101058001392,99011131106000004939,99011131107079001735,99011131107000010040,99011131110027001522,99011131102000009634,99011131110034001147,99011131110041001878,99011131110055001160,99011131107098001754,99011131101073001260,99011131110067001242,99011131110035001219,99011131110054001629,99011131110053001498,99011131102000013443,99011131110073001839,99011131107099001549,99011131110077001962,99011131101082001023,99011131110078001352,99011131107088001979,99011131106002002837,99011131107097001043,99011131110030001837,99011131107094001609,99011131110048001916,99011131102000002178,99011131110127001132,99011131110083001210,99011131109005001553,99011131107081002111,99011131107119001768,99011131109006001673,99011131104041001134,99011132101085001111,99011131110097001587";
        String [] bbbbb = assasas.split(",");


        for (String s : bbbbb) {
            if(!asa.contains(s)){
                log.info("s:{}",s);
            }
        }


        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        log.info(simpleDateFormat.format(new Date()));
        simpleDateFormat.applyPattern("yyyy-MM-dd");
        log.info(simpleDateFormat.format(new Date()));
        Date date = new Date();
        Date a = simpleDateFormat.parse(simpleDateFormat.format(date));
        Date b = simpleDateFormat.parse("2025-03-14");

        SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        String ReqDate = simpleDateFormat2.format(new Date());
        simpleDateFormat2.applyPattern("HH:mm:ss");
        String ReqTime = simpleDateFormat2.format(new Date());


        String uuid = UUID.randomUUID().toString().replace("-","");
        if(a.compareTo(b) > 0){
            log.info("a大");
        }
        if(a.compareTo(b) < 0){
            log.info("b大");
        }

        try {
            int f = 1/0;
        }catch (Exception e){
            log.error("qwqwq",e);
            log.error("qwqwq"+e);
            e.printStackTrace();
        }

        String repData = "<?xml version='1.0' encoding='GBK'?><FTMS>    <head>        <CustIP>10.50.225.1</CustIP>        <TransID>20240326165158kj8hkmu38196vfk4</TransID>        <TransCode>DEP003</TransCode>        <RespCode>F006</RespCode>        <RespInfo>发生错误:1000,找不到服务路径为path=/FEDCDepServer/depProuctPeriodicalApplyService的服务</RespInfo>    </head></FTMS>\n";
        try{

            int as= 1;
            int as2 = 1;
            boolean asas = Objects.equals(as,as2);

            Integer q = 1;
            Integer q1 = null;
            Integer q2 = 1;
            Integer q3 = 2;
            Integer q4 = 500;

            BigDecimal w = null;
            BigDecimal w1 = new BigDecimal(1);
            BigDecimal w2 = new BigDecimal(1);
            BigDecimal w3 = new BigDecimal(2);

            String r = null;
            String r1 = "e";
            String r2 = "e";
            String r3 = "t";

            Document document = DocumentHelper.parseText(repData);
            Element reroot = document.getRootElement();
            Element head = reroot.element("head");
            String respCode = head.element("RespCode").getTextTrim();

            String fff= "";
            if(StringUtils.isEmpty(fff)){

            }

            //F006:失败（程序错误或者验证没通过，需要重发）
            if ("F006".equals(respCode)) {


            }
        }catch (Exception e){
            log.error("",e);
        }

        BigDecimal SYJERMB = BigDecimal.ONE;
        BigDecimal syhl = new BigDecimal("1.23333");
        SYJERMB = SYJERMB.multiply(syhl);
        SYJERMB= SYJERMB.setScale(2, RoundingMode.HALF_UP);
        log.error("",SYJERMB);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try{
            BankTransDetail bankTransDetail = new BankTransDetail();
            bankTransDetail.setAccountunit("1");
            BankTransDetail bankTransDetail2 = new BankTransDetail();

            if(Objects.equals(bankTransDetail2.getAccountunit(),bankTransDetail.getAccountunit())){
                log.error("aaaa");
            }

            Date date1 = sdf.parse("2024-01-01");
            Date date2 = sdf.parse("2024-01-01");

            if(Objects.equals(date1,date2)){
                log.error("aaaa");
            }


            JtgkTmckcpEntity jtgkTmckcpIn = new JtgkTmckcpEntity();
            JtgkTmckcpEntity jtgkTmckcpUpOld = new JtgkTmckcpEntity();
            JtgkTmckcpEntity jtgkTmckcpUp = null;


            String jtgkTmckcpOld = "[{\"amount\":10000,\"code\":\"BH20221130000002\",\"createtime\":1713324447555,\"currency\":\"6a4b352a-f5c7-56c6-dfa8-ed501a87d98e\",\"fdsx\":0,\"fdxx\":0,\"id\":\"702917e6-da34-40c9-a980-6de22d35b171\",\"interestrate\":1.9,\"interestratetype\":\"2\",\"jzlv\":\"0ef56975-2d4b-46ae-9c98-3054a12d3418\",\"lastmodifiedtime\":1669737600000,\"lx\":1,\"name_chs\":\"同业定期存款78天\",\"qxdw\":4,\"startdate\":1669737600000,\"state\":2,\"timestamps_createdby\":\"CP20221130000002\",\"timestamps_lastchangedby\":\"L283\",\"ver\":\"1\",\"version\":0,\"whrq\":1713324447557,\"zdqx\":78,\"zl\":1}]";
            List<JtgkTmckcpEntity> jtgkTmckcpList = JSONObject.parseArray(jtgkTmckcpOld, JtgkTmckcpEntity.class);

            jtgkTmckcpUp = jtgkTmckcpList.get(0);//需要更新的老数据
            jtgkTmckcpUpOld = (JtgkTmckcpEntity)deepClone(jtgkTmckcpList.get(0));//老数据--深克隆
            jtgkTmckcpUp.setVersion(new BigDecimal(1));
            simpleDateFormat.applyPattern("yyyyMMdd");
            jtgkTmckcpUp.setEnddate(StringUtils.isEmpty("20230101") ? null : simpleDateFormat.parse("20230101"));


            String jtgkTmckcpNew = "{\"amount\":10000,\"code\":\"BH20221130000002\",\"createtime\":1713324466100,\"currency\":\"6a4b352a-f5c7-56c6-dfa8-ed501a87d98e\",\"fdsx\":0,\"fdxx\":0,\"id\":\"e8ef83f7-1e93-4deb-9c7a-a987b2b843a8\",\"interestrate\":1.9,\"interestratetype\":\"2\",\"jzlv\":\"0ef56975-2d4b-46ae-9c98-3054a12d3418\",\"lastmodifiedtime\":1669737600000,\"lx\":1,\"name_chs\":\"同业定期存款78天\",\"qxdw\":4,\"startdate\":1669737600000,\"state\":2,\"timestamps_createdby\":\"CP20221130000002\",\"timestamps_lastchangedby\":\"L283\",\"ver\":\"2\",\"version\":0,\"whrq\":1713324466101,\"zdqx\":78,\"zl\":1}";
            jtgkTmckcpIn= JSONObject.parseObject(jtgkTmckcpNew, JtgkTmckcpEntity.class);

            if(isChange(jtgkTmckcpUpOld,jtgkTmckcpIn)){
                log.error("aaaa");
            }

            jtgkTmckcpUp.setVersion(new BigDecimal(1));
            simpleDateFormat.applyPattern("yyyyMMdd");
            String EffectDate = "20240101";
            jtgkTmckcpUp.setEnddate(StringUtils.isEmpty(EffectDate) ? null : simpleDateFormat.parse(EffectDate));


            String var = Integer.parseInt("10") + 1 + "";
            log.info(var);

            String temporal1 = "20240401";
            String temporal2 = "20240411";
            long daysDiff = ChronoUnit.DAYS.between(simpleDateFormat.parse(temporal1).toInstant(), simpleDateFormat.parse(temporal2).toInstant());
            log.info("daysDiff:{}",daysDiff);

            BigDecimal aasdasdas= new BigDecimal("600");
            BigDecimal aasdasdasasdas= new BigDecimal("200");
            BigDecimal asadadasdasd = aasdasdas.subtract(aasdasdasasdas);
            log.info("asadadasdasd:{}",asadadasdasd);


        }catch (Exception e){
            log.error("",e);
        }

        BigDecimal qw = null;
        BigDecimal qw1 = new BigDecimal(1);
        BigDecimal qw2 = new BigDecimal(1);
        BigDecimal qw3 = new BigDecimal(2);
        Objects.equals(qw,qw1);
        Objects.equals(qw2,qw1);
        Objects.equals(qw2,qw3);

        clientTest.InvocationHandlerTest();

        try{
            List<BankTransDetail> bankTransDetails = new ArrayList<>();
            BankTransDetail bankTransDetail = new BankTransDetail();
            bankTransDetail.setCurrency("1");
            bankTransDetails.add(bankTransDetail);

            BankTransDetail bankTransDetail2 = new BankTransDetail();
            bankTransDetail2.setCurrency("2");
            bankTransDetails.add(bankTransDetail2);

            BankTransDetail bankTransDetail3 = new BankTransDetail();
            bankTransDetail3.setCurrency("3");
            bankTransDetails.add(bankTransDetail3);

            BankTransDetail bankTransDetail4 = new BankTransDetail();
            bankTransDetail4.setCurrency("2");
            bankTransDetails.add(bankTransDetail4);

            BankTransDetail bankTransDetail5 = new BankTransDetail();
            bankTransDetail5.setCurrency("4");
            bankTransDetails.add(bankTransDetail5);

            Iterator<BankTransDetail> it = bankTransDetails.iterator();
            while(it.hasNext()){
                BankTransDetail str = it.next();
                if("3".equals(str.getCurrency())){
                    it.remove();
                }
            }
            log.info("bankTransDetails:{}", JSONObject.toJSONString(bankTransDetails));


            Date aaa = jsonObject.getDate("aaa");
            log.info("aaa:{}", aaa);


            String asaaaaaa ="SELECT\n" +
                    "\tBankTranscationDetails.ID AS \"ID\",\n" +
                    "\tBankTranscationDetails.Version AS \"Version\",\n" +
                    "\tBankTranscationDetails.BankFlowNo AS \"BankFlowNo\",\n" +
                    "\tBankTranscationDetails.BusinessRefNo AS \"BusinessRefNo\",\n" +
                    "\tBankTranscationDetails.AccountUnit AS \"AccountUnit\",\n" +
                    "\tBankTranscationDetails.BankAccount AS \"BankAccount\",\n" +
                    "\tBankTranscationDetails.BankAccountNo AS \"BankAccountNo\",\n" +
                    "\tBankTranscationDetails.Currency AS \"Currency\",\n" +
                    "\tBankTranscationDetails.SettlementAmount AS \"SettlementAmount\",\n" +
                    "\tBankTranscationDetails.ReciprocalAccount AS \"ReciprocalAccount\",\n" +
                    "\tBankTranscationDetails.ReciprocalAccountNo AS \"ReciprocalAccountNo\",\n" +
                    "\tBankTranscationDetails.ReciprocalAccName AS \"ReciprocalAccName\",\n" +
                    "\tBankTranscationDetails.ReciprocalUnit AS \"ReciprocalUnit\",\n" +
                    "\tBankTranscationDetails.ReciprocalUnitName AS \"ReciprocalUnitName\",\n" +
                    "\tBankTranscationDetails.BankOfReciprocalAccount AS \"BankOfReciprocalAccount\",\n" +
                    "\tBankTranscationDetails.BankCodeOfReciprocalAccount AS \"BankCodeOfReciprocalAccount\",\n" +
                    "\tBankTranscationDetails.Country AS \"Country\",\n" +
                    "\tBankTranscationDetails.City AS \"City\",\n" +
                    "\tBankTranscationDetails.Provice AS \"Provice\",\n" +
                    "\tBankTranscationDetails.AcceptedBillNo AS \"AcceptedBillNo\",\n" +
                    "\tBankTranscationDetails.Summary AS \"Summary\",\n" +
                    "\tBankTranscationDetails.OrigBankFlowNo AS \"OrigBankFlowNo\",\n" +
                    "\tBankTranscationDetails.POSNumber AS \"POSNumber\",\n" +
                    "\tBankTranscationDetails.POSName AS \"POSName\",\n" +
                    "\tTO_char(BankTranscationDetails.TransactionDate,'yyyyMMdd') AS \"TransactionDate\",\n" +
                    "\tBankTranscationDetails.TransactionTime AS \"TransactionTime\",\n" +
                    "\tBankTranscationDetails.TransStatus AS \"TransStatus\",\n" +
                    "\tBankTranscationDetails.ReconciliationStatus AS \"ReconciliationStatus\",\n" +
                    "\tBankTranscationDetails.FReconciliationStatus AS \"FReconciliationStatus\",\n" +
                    "\tBankTranscationDetails.CorrectionEntriesFlag AS \"CorrectionEntriesFlag\",\n" +
                    "\tBankTranscationDetails.ReserveSN AS \"ReserveSN\",\n" +
                    "\tBankTranscationDetails.InnerFlag AS \"InnerFlag\",\n" +
                    "\tBankTranscationDetails.VirtualAccNo AS \"VirtualAccNo\",\n" +
                    "\tBankTranscationDetails.VirtualAccName AS \"VirtualAccName\",\n" +
                    "\tBankTranscationDetails.IncomeOrExpenditure AS \"IncomeOrExpenditure\",\n" +
                    "\tBankTranscationDetails.HasObtainBankReceipt AS \"HasObtainBankReceipt\",\n" +
                    "\tBankTranscationDetails.BankReceiptID AS \"BankReceiptID\",\n" +
                    "\tBankTranscationDetails.PrintTimes AS \"PrintTimes\",\n" +
                    "\tBankTranscationDetails.ImmediateAmount AS \"ImmediateAmount\",\n" +
                    "\tBankTranscationDetails.BizType AS \"BizType\",\n" +
                    "\tBankTranscationDetails.IsTimeCurrentTrans AS \"IsTimeCurrentTrans\",\n" +
                    "\tBankTranscationDetails.DocReverseFlag AS \"DocReverseFlag\",\n" +
                    "\tBankTranscationDetails.TransType AS \"TransType\",\n" +
                    "\tBankTranscationDetails.TimeStamp_CreatedBy AS \"TimeStamp_CreatedBy\",\n" +
                    "\tBankTranscationDetails.TimeStamp_CreatedOn AS \"TimeStamp_CreatedOn\",\n" +
                    "\tBankTranscationDetails.TimeStamp_LastChangedBy AS \"TimeStamp_LastChangedBy\",\n" +
                    "\tBankTranscationDetails.TimeStamp_LastChangedOn AS \"TimeStamp_LastChangedOn\",\n" +
                    "\tBankTranscationDetails.DataSrc AS \"DataSrc\",\n" +
                    "\tBankTranscationDetails.ExpenseNo AS \"ExpenseNo\",\n" +
                    "\tBankTranscationDetails.InnerAccountNo AS \"InnerAccountNo\",\n" +
                    "\tBankTranscationDetails.InnerAccountName AS \"InnerAccountName\",\n" +
                    "\tBankTranscationDetails.AMT02 AS \"AMT02\",\n" +
                    "\tBankTranscationDetails.NUM01 AS \"NUM01\",\n" +
                    "\tBankTranscationDetails.AMT05 AS \"AMT05\",\n" +
                    "\tBankTranscationDetails.AMT04 AS \"AMT04\",\n" +
                    "\tBankTranscationDetails.AMT03 AS \"AMT03\",\n" +
                    "\tBankTranscationDetails.AMT01 AS \"AMT01\",\n" +
                    "\tBankTranscationDetails.TIME02 AS \"TIME02\",\n" +
                    "\tBankTranscationDetails.TIME01 AS \"TIME01\",\n" +
                    "\tBankTranscationDetails.DATE02 AS \"DATE02\",\n" +
                    "\tBankTranscationDetails.DATE01 AS \"DATE01\",\n" +
                    "\tBankTranscationDetails.TXT02 AS \"TXT02\",\n" +
                    "\tBankTranscationDetails.TXT01 AS \"TXT01\",\n" +
                    "\tBankTranscationDetails.FK05 AS \"FK05\",\n" +
                    "\tBankTranscationDetails.FK04 AS \"FK04\",\n" +
                    "\tBankTranscationDetails.FK03 AS \"FK03\",\n" +
                    "\tBankTranscationDetails.FK02 AS \"FK02\",\n" +
                    "\tBankTranscationDetails.FK01 AS \"FK01\",\n" +
                    "\tBankTranscationDetails.NUM05 AS \"NUM05\",\n" +
                    "\tBankTranscationDetails.NUM04 AS \"NUM04\",\n" +
                    "\tBankTranscationDetails.NUM03 AS \"NUM03\",\n" +
                    "\tBankTranscationDetails.NUM02 AS \"NUM02\",\n" +
                    "\tBankTranscationDetails.ZLID AS \"ZLID\",\n" +
                    "\tBankTranscationDetails.IMAGECOUNT AS \"IMAGECOUNT\",\n" +
                    "\tBankTranscationDetails.GLJSDBS AS \"GLJSDBS\",\n" +
                    "\tBankTranscationDetails.TXT07 AS \"TXT07\",\n" +
                    "\tBankTranscationDetails.TXT06 AS \"TXT06\",\n" +
                    "\tBankTranscationDetails.TXT05 AS \"TXT05\",\n" +
                    "\tBankTranscationDetails.TXT04 AS \"TXT04\",\n" +
                    "\tBankTranscationDetails.TXT03 AS \"TXT03\",\n" +
                    "\tMasterOrganization.Code AS \"AccountUnit_MasterOrganiza80\",\n" +
                    "\tMasterOrganization.Name_CHS AS \"AccountUnit_MasterOrganiza81\",\n" +
                    "\tBankAccounts.OpenAccountUnit AS \"BankAccount_BankAccount_Op82\",\n" +
                    "\tBankAccounts.AccountName_CHS AS \"BankAccount_BankAccount_Ac83\",\n" +
                    "\tBankAccounts.ShortName_CHS AS \"BankAccount_BankAccount_Sh84\",\n" +
                    "\tBankAccounts.AccountNo AS \"BankAccount_BankAccount_Ac85\",\n" +
                    "\tBankAccounts.AccountProperty AS \"BankAccount_BankAccount_Ac86\",\n" +
                    "\tBankAccounts.ID AS \"BankAccount_BankAccount_ID\",\n" +
                    "\tBankAccounts_Rec.ID AS \"BankAccounts_Rec_BankAccount_ID\",\n" +
                    "\tAdminOrganization.Name_CHS AS \"BankAccount_OpenAccountUni87\",\n" +
                    "\tBankAccountProperty.Name_CHS AS \"BankAccount_AccountPropert88\",\n" +
                    "\tCurrency.Name_CHS AS \"Currency_Currency_Name\"\n" +
                    "FROM\n" +
                    "\tBPBANKTRANSCATIONDETAILS BankTranscationDetails LEFT OUTER\n" +
                    "\tJOIN BFMasterOrganization MasterOrganization ON BankTranscationDetails.AccountUnit = MasterOrganization.ID \n" +
                    "\tLEFT OUTER JOIN BFBankAccounts BankAccounts ON BankTranscationDetails.BankAccount = BankAccounts.ID \n" +
                    "\tLEFT OUTER JOIN BFBankAccounts BankAccounts_Rec ON BankTranscationDetails.ReciprocalAccountNo = BankAccounts_Rec.ACCOUNTNO \n" +
                    "\tLEFT OUTER JOIN BFAdminOrganization AdminOrganization ON BankAccounts.OpenAccountUnit = AdminOrganization.ID LEFT OUTER\n" +
                    "\tJOIN BFBankAccountProperty BankAccountProperty ON BankAccounts.AccountProperty = BankAccountProperty.ID LEFT OUTER\n" +
                    "\tJOIN bfCurrency Currency ON BankTranscationDetails.Currency = Currency.ID\n" +
                    "\tJOIN (\n" +
                    "\tSELECT\n" +
                    "\t\ttable_alias.ID AS PK \n" +
                    "\tFROM\n" +
                    "\t\t(\n" +
                    "\t\tSELECT ROWNUM AS\n" +
                    "\t\t\trnumber,\n" +
                    "\t\t\ttable_alias1.ID \n" +
                    "\t\tFROM\n" +
                    "\t\t\t(\n" +
                    "\t\t\tSELECT\n" +
                    "\t\t\t\tBankTranscationDetails.ID AS ID \n" +
                    "\t\t\tFROM\n" +
                    "\t\t\t\tBPBANKTRANSCATIONDETAILS BankTranscationDetails LEFT OUTER\n" +
                    "\t\t\t\tJOIN BFMasterOrganization MasterOrganization ON BankTranscationDetails.AccountUnit = MasterOrganization.ID LEFT OUTER\n" +
                    "\t\t\t\tJOIN BFBankAccounts BankAccounts ON BankTranscationDetails.BankAccount = BankAccounts.ID LEFT OUTER\n" +
                    "\t\t\t\tJOIN BFAdminOrganization AdminOrganization ON BankAccounts.OpenAccountUnit = AdminOrganization.ID LEFT OUTER\n" +
                    "\t\t\t\tJOIN BFBankAccountProperty BankAccountProperty ON BankAccounts.AccountProperty = BankAccountProperty.ID LEFT OUTER\n" +
                    "\t\t\t\tJOIN bfCurrency Currency ON BankTranscationDetails.Currency = Currency.ID \n" +
                    "\t\t\tWHERE\n" +
                    "\t\t\t\t(\n" +
                    "\t\t\t\t\n" +
                    "\t\t\t\t\tAND BankTranscationDetails.TransStatus <> '5'\n" +
                    "\t\t\t\t\tAND BankTranscationDetails.BankAccount IN (\n" +
                    "\t\t\t\t\tSELECT\n" +
                    "\t\t\t\t\t\tbfbankaccounts.id \n" +
                    "\t\t\t\t\tFROM\n" +
                    "\t\t\t\t\t\tbfbankaccounts\n" +
                    "\t\t\t\t\t\tLEFT JOIN bfbank ON bfbankaccounts.bank = bfbank.id\n" +
                    "\t\t\t\t\t\tLEFT JOIN bfbanktype ON bfbank.banktype = bfbanktype.id \n" +
                    "\t\t\t\t\tWHERE\n" +
                    "\t\t\t\t\t\tbfbankaccounts.innerorouter = 2 \n" +
                    "\t\t\t\t\t\tAND bfbankaccounts.accountstatus = 2 \n" +
                    "\t\t\t\t\t) \n" +
                    "\t\t\t\t) \n" +
                    "\t\t\tORDER BY\n" +
                    "\t\t\t\tBankTranscationDetails.TransactionDate ASC,\n" +
                    "\t\t\t\tBankTranscationDetails.ID \n" +
                    "\t\t\t) table_alias1 \n" +
                    "\t\t) table_alias \n" +
                    "\tWHERE\n" +
                    "\t\ttable_alias.rnumber > 0 \n" +
                    "\t) tblPK ON BankTranscationDetails.ID = tblPK.PK \n" +
                    "ORDER BY\n" +
                    "\tBankTranscationDetails.TransactionDate ASC,\n" +
                    "\tBankTranscationDetails.ID";

        }catch (Exception e){
            log.error("",e);
        }

        return Result.ok();
    }

    private Boolean isChange(JtgkTmckcpEntity jtgkTmckcpOld,JtgkTmckcpEntity jtgkTmckcpNew){
        log.error("判断实体类（JtgkTmckcpEntity）是否变化 jtgkTmckcpOld:{},jtgkTmckcpNew:{}", JSONObject.toJSONString(jtgkTmckcpOld) + "===="+JSONObject.toJSONString(jtgkTmckcpNew));
        log.error("判断实体类（JtgkTmckcpEntity）是否变化 jtgkTmckcpOld:{},jtgkTmckcpNew:{}",
                "!Objects.equals(jtgkTmckcpNew.getZl(),jtgkTmckcpOld.getZl())："+!Objects.equals(jtgkTmckcpNew.getZl(),jtgkTmckcpOld.getZl())+
                        "!Objects.equals(jtgkTmckcpNew.getTimestamps_createdby(),jtgkTmckcpOld.getTimestamps_createdby())："+!Objects.equals(jtgkTmckcpNew.getTimestamps_createdby(),jtgkTmckcpOld.getTimestamps_createdby())+
                        "!Objects.equals(jtgkTmckcpNew.getCode(),jtgkTmckcpOld.getCode())："+!Objects.equals(jtgkTmckcpNew.getCode(),jtgkTmckcpOld.getCode())+
                        "!Objects.equals(jtgkTmckcpNew.getName_chs(),jtgkTmckcpOld.getName_chs())："+!Objects.equals(jtgkTmckcpNew.getName_chs(),jtgkTmckcpOld.getName_chs())+
                        "!Objects.equals(jtgkTmckcpNew.getLx(),jtgkTmckcpOld.getLx())："+!Objects.equals(jtgkTmckcpNew.getLx(),jtgkTmckcpOld.getLx())+
                        "!Objects.equals(jtgkTmckcpNew.getCurrency(),jtgkTmckcpOld.getCurrency())："+!Objects.equals(jtgkTmckcpNew.getCurrency(),jtgkTmckcpOld.getCurrency())+
                        "!Objects.equals(jtgkTmckcpNew.getZdqx(),jtgkTmckcpOld.getZdqx())："+!Objects.equals(jtgkTmckcpNew.getZdqx(),jtgkTmckcpOld.getZdqx())+
                        "!Objects.equals(jtgkTmckcpNew.getQxdw(),jtgkTmckcpOld.getQxdw())："+!Objects.equals(jtgkTmckcpNew.getQxdw(),jtgkTmckcpOld.getQxdw())+
                        "!Objects.equals(jtgkTmckcpNew.getStartdate(),jtgkTmckcpOld.getStartdate())："+!Objects.equals(jtgkTmckcpNew.getStartdate(),jtgkTmckcpOld.getStartdate())+
                        "!Objects.equals(jtgkTmckcpNew.getEnddate(),jtgkTmckcpOld.getEnddate())："+!Objects.equals(jtgkTmckcpNew.getEnddate(),jtgkTmckcpOld.getEnddate())+
                        "!Objects.equals(jtgkTmckcpNew.getInterestratetype(),jtgkTmckcpOld.getInterestratetype())："+!Objects.equals(jtgkTmckcpNew.getInterestratetype(),jtgkTmckcpOld.getInterestratetype())+
                        "!Objects.equals(jtgkTmckcpNew.getFdxx(),jtgkTmckcpOld.getFdxx())："+!Objects.equals(jtgkTmckcpNew.getFdxx(),jtgkTmckcpOld.getFdxx())+
                        "!Objects.equals(jtgkTmckcpNew.getFdsx(),jtgkTmckcpOld.getFdsx())："+!Objects.equals(jtgkTmckcpNew.getFdsx(),jtgkTmckcpOld.getFdsx())+
                        "!Objects.equals(jtgkTmckcpNew.getInterestrate(),jtgkTmckcpOld.getInterestrate())："+!Objects.equals(jtgkTmckcpNew.getInterestrate(),jtgkTmckcpOld.getInterestrate())+
                        "!Objects.equals(jtgkTmckcpNew.getJzlv(),jtgkTmckcpOld.getJzlv())："+!Objects.equals(jtgkTmckcpNew.getJzlv(),jtgkTmckcpOld.getJzlv())+
                        "!Objects.equals(jtgkTmckcpNew.getLastmodifiedtime(),jtgkTmckcpOld.getLastmodifiedtime())："+!Objects.equals(jtgkTmckcpNew.getLastmodifiedtime(),jtgkTmckcpOld.getLastmodifiedtime())+
                        "!Objects.equals(jtgkTmckcpNew.getAmount(),jtgkTmckcpOld.getAmount())："+!Objects.equals(jtgkTmckcpNew.getAmount(),jtgkTmckcpOld.getAmount())+
                        "!Objects.equals(jtgkTmckcpNew.getState(),jtgkTmckcpOld.getState())："+!Objects.equals(jtgkTmckcpNew.getState(),jtgkTmckcpOld.getState())+
                        "!Objects.equals(jtgkTmckcpNew.getTimestamps_lastchangedby(),jtgkTmckcpOld.getTimestamps_lastchangedby())："+!Objects.equals(jtgkTmckcpNew.getTimestamps_lastchangedby(),jtgkTmckcpOld.getTimestamps_lastchangedby())
        );
        if(!Objects.equals(jtgkTmckcpNew.getZl(),jtgkTmckcpOld.getZl()) ||
                !Objects.equals(jtgkTmckcpNew.getTimestamps_createdby(),jtgkTmckcpOld.getTimestamps_createdby()) ||
                !Objects.equals(jtgkTmckcpNew.getCode(),jtgkTmckcpOld.getCode()) ||
                !Objects.equals(jtgkTmckcpNew.getName_chs(),jtgkTmckcpOld.getName_chs()) ||
                !Objects.equals(jtgkTmckcpNew.getLx(),jtgkTmckcpOld.getLx()) ||
                !Objects.equals(jtgkTmckcpNew.getCurrency(),jtgkTmckcpOld.getCurrency()) ||
                !Objects.equals(jtgkTmckcpNew.getZdqx(),jtgkTmckcpOld.getZdqx()) ||
                !Objects.equals(jtgkTmckcpNew.getQxdw(),jtgkTmckcpOld.getQxdw()) ||
                !Objects.equals(jtgkTmckcpNew.getStartdate(),jtgkTmckcpOld.getStartdate()) ||
                !Objects.equals(jtgkTmckcpNew.getEnddate(),jtgkTmckcpOld.getEnddate()) ||
                !Objects.equals(jtgkTmckcpNew.getInterestratetype(),jtgkTmckcpOld.getInterestratetype()) ||
                !Objects.equals(jtgkTmckcpNew.getFdxx(),jtgkTmckcpOld.getFdxx()) ||
                !Objects.equals(jtgkTmckcpNew.getFdsx(),jtgkTmckcpOld.getFdsx()) ||
                !Objects.equals(jtgkTmckcpNew.getInterestrate(),jtgkTmckcpOld.getInterestrate())||
                !Objects.equals(jtgkTmckcpNew.getJzlv(),jtgkTmckcpOld.getJzlv()) ||
                !Objects.equals(jtgkTmckcpNew.getLastmodifiedtime(),jtgkTmckcpOld.getLastmodifiedtime()) ||
                !Objects.equals(jtgkTmckcpNew.getAmount(),jtgkTmckcpOld.getAmount()) ||
                !Objects.equals(jtgkTmckcpNew.getState(),jtgkTmckcpOld.getState()) ||
                !Objects.equals(jtgkTmckcpNew.getTimestamps_lastchangedby(),jtgkTmckcpOld.getTimestamps_lastchangedby())
        ){
            return true;
        }
        return false;
    }


    @PostMapping("/redisTest1")
    public Result redisTest1(@RequestBody JSONObject jsonObject) throws ParseException {

        try{


            String FilePath = "20181029\\010399999\\123401.pdf";

            String[] FilePaths = FilePath.split("\\\\");
            String FilePath2 = FilePaths[FilePaths.length-1];


            InputStream inputStream = returnBitMap("192.168.92.1",FilePath);
            String Base64String = inputStreamToBase64(inputStream);


            log.info("redisTest1", "redisTest1=：{}",Base64String);
        }catch (Exception e){

            log.error("redisTest1", "redisTest1=：{}",e);
        }
        return Result.ok();
    }

    @PostMapping("/redisTest2")
    public Result redisTest2(@RequestBody JSONObject jsonObject) throws ParseException {

        try{


            String filePath = "C:\\Users\\hp\\Pictures\\Camera Roll\\asd.jpg"; // 替换为您的文件路径
            String base64String = convertFileToBase64(new File(filePath));
            log.error(base64String);
        }catch (Exception e){

            log.error("redisTest1", "redisTest1=：{}",e);


        }
        return Result.ok();
    }

    @PostMapping("/redisTest3")
    public Result redisTest3(@RequestBody JSONObject jsonObject) throws ParseException {

        try{


            String repData = "<?xml version='1.0' encoding='GBK'?>\n" +                     "<FTMS>\n" +                     "    <head>\n" +                     "        <CustIP>10.50.225.1</CustIP>\n" +                     "        <CustOpr>101026198003021328</CustOpr>\n" +                     "        <TransID>202409251039065936thchh7t8e8jm</TransID>\n" +                     "        <TransCode>DEP011</TransCode>\n" +                     "        <RespCode>F001</RespCode>\n" +                     "        <RespInfo>交易成功</RespInfo>\n" +                     "    </head>\n" +                     "    <body>\n" +                     "        <Bill>\n" +                     "            <BusiStatus>1</BusiStatus>\n" +                     "            <ProtocolId>XY_2024092513065</ProtocolId>\n" +                     "            <ProtocolCode>DC20240117000064</ProtocolCode>\n" +                     "            <ProtocolAccCode>99011400104000000003</ProtocolAccCode>\n" +                     "            <CurrType>CNY</CurrType>\n" +                     "            <StartDate>20240118</StartDate>\n" +                     "            <ExpireDate>20240119</ExpireDate>\n" +                     "            <IsTranDeposit>1</IsTranDeposit>\n" +                     "            <Amt>7000249.5</Amt>\n" +                     "            <Rate>1.3</Rate>\n" +                     "            <FloatType>1</FloatType>\n" +                     "            <ZjlvdcNlv>1.1</ZjlvdcNlv>\n" +                     "            <FloatMethod>1</FloatMethod>\n" +                     "            <FloatValue>20</FloatValue>\n" +                     "            <ProtocolType>01</ProtocolType>\n" +                     "            <ProdFactId>CP20240924000001</ProdFactId>\n" +                     "            <IsTranTake>0</IsTranTake>\n" +                     "            <TranDepositType>1</TranDepositType>\n" +                     "            <InterestAccCode>99011131104000001001</InterestAccCode>\n" +                     "            <StartAccualDate>20240118</StartAccualDate>\n" +                     "        </Bill>\n" +                     "        <Bill>\n" +                     "            <BusiStatus>1</BusiStatus>\n" +                     "            <ProtocolId>DC20240116000060</ProtocolId>\n" +                     "            <ProtocolCode>DC20240116000060</ProtocolCode>\n" +                     "            <ProtocolAccCode>99011400104000000002</ProtocolAccCode>\n" +                     "            <CurrType>CNY</CurrType>\n" +                     "            <StartDate>20240116</StartDate>\n" +                     "            <ExpireDate>20240716</ExpireDate>\n" +                     "            <IsTranDeposit>0</IsTranDeposit>\n" +                     "            <Amt>700000</Amt>\n" +                     "            <Rate>1.82</Rate>\n" +                     "            <FloatType>1</FloatType>\n" +                     "            <ZjlvdcNlv>1.3</ZjlvdcNlv>\n" +                     "            <FloatMethod>0</FloatMethod>\n" +                     "            <FloatValue>40</FloatValue>\n" +                     "            <ProtocolType>01</ProtocolType>\n" +                     "            <ProdFactId>CP20200603000001</ProdFactId>\n" +                     "            <IsTranTake>1</IsTranTake>\n" +                     "            <TranDepositType></TranDepositType>\n" +                     "            <InterestAccCode>99011131104000001001</InterestAccCode>\n" +                     "            <StartAccualDate>20240116</StartAccualDate>\n" +                     "        </Bill>\n" +                     "        <Bill>\n" +                     "            <BusiStatus>2</BusiStatus>\n" +                     "            <ProtocolId>DC20240116000061</ProtocolId>\n" +                     "            <ProtocolCode>DC20240116000061</ProtocolCode>\n" +                     "            <ProtocolAccCode>99011400101005000001</ProtocolAccCode>\n" +                     "            <CurrType>CNY</CurrType>\n" +                     "            <StartDate>20240116</StartDate>\n" +                     "            <ExpireDate>20240117</ExpireDate>\n" +                     "            <IsTranDeposit>1</IsTranDeposit>\n" +                     "            <Amt>100000</Amt>\n" +                     "            <Rate>1.3</Rate>\n" +                     "            <FloatType>1</FloatType>\n" +                     "            <ZjlvdcNlv>1.1</ZjlvdcNlv>\n" +                     "            <FloatMethod>1</FloatMethod>\n" +                     "            <FloatValue>20</FloatValue>\n" +                     "            <ProtocolType>01</ProtocolType>\n" +                     "            <ProdFactId>CP20240924000001</ProdFactId>\n" +                     "            <IsTranTake>0</IsTranTake>\n" +                     "            <TranDepositType>1</TranDepositType>\n" +                     "            <InterestAccCode>99011131104000001001</InterestAccCode>\n" +                     "            <StartAccualDate>20240116</StartAccualDate>\n" +                     "        </Bill>\n" +                     "        <Bill>\n" +                     "            <BusiStatus>2</BusiStatus>\n" +                     "            <ProtocolId>XY_2024092413056</ProtocolId>\n" +                     "            <ProtocolCode>DC20240116000061</ProtocolCode>\n" +                     "            <ProtocolAccCode>99011400101005000001</ProtocolAccCode>\n" +                     "            <CurrType>CNY</CurrType>\n" +                     "            <StartDate>20240117</StartDate>\n" +                     "            <ExpireDate>20240118</ExpireDate>\n" +                     "            <IsTranDeposit>1</IsTranDeposit>\n" +                     "            <Amt>100003.56</Amt>\n" +                     "            <Rate>1.3</Rate>\n" +                     "            <FloatType>1</FloatType>\n" +                     "            <ZjlvdcNlv>1.1</ZjlvdcNlv>\n" +                     "            <FloatMethod>1</FloatMethod>\n" +                     "            <FloatValue>20</FloatValue>\n" +                     "            <ProtocolType>01</ProtocolType>\n" +                     "            <ProdFactId>CP20240924000001</ProdFactId>\n" +                     "            <IsTranTake>0</IsTranTake>\n" +                     "            <TranDepositType>1</TranDepositType>\n" +                     "            <InterestAccCode>99011131104000001001</InterestAccCode>\n" +                     "            <StartAccualDate>20240117</StartAccualDate>\n" +                     "        </Bill>\n" +                     "        <Bill>\n" +                     "            <BusiStatus>2</BusiStatus>\n" +                     "            <ProtocolId>DC20240117000064</ProtocolId>\n" +                     "            <ProtocolCode>DC20240117000064</ProtocolCode>\n" +                     "            <ProtocolAccCode>99011400104000000003</ProtocolAccCode>\n" +                     "            <CurrType>CNY</CurrType>\n" +                     "            <StartDate>20240117</StartDate>\n" +                     "            <ExpireDate>20240118</ExpireDate>\n" +                     "            <IsTranDeposit>1</IsTranDeposit>\n" +                     "            <Amt>7000000</Amt>\n" +                     "            <Rate>1.3</Rate>\n" +                     "            <FloatType>1</FloatType>\n" +                     "            <ZjlvdcNlv>1.1</ZjlvdcNlv>\n" +                     "            <FloatMethod>1</FloatMethod>\n" +                     "            <FloatValue>20</FloatValue>\n" +                     "            <ProtocolType>01</ProtocolType>\n" +                     "            <ProdFactId>CP20240924000001</ProdFactId>\n" +                     "            <IsTranTake>0</IsTranTake>\n" +                     "            <TranDepositType>1</TranDepositType>\n" +                     "            <InterestAccCode>99011131104000001001</InterestAccCode>\n" +                     "            <StartAccualDate>20240117</StartAccualDate>\n" +                     "        </Bill>\n" +                     "    </body>\n" +                     "</FTMS>";

            Document document = DocumentHelper.parseText(repData);
            Element reRoot = document.getRootElement();
            Element head = reRoot.element("head");
            String respCode = head.element("RespCode").getTextTrim();
            if ("F001".equals(respCode)) {
                List<Element> bills = reRoot.element("body").elements("Bill");//获取响应报文信息的BILL节点
                bills.get(0).element("StartAccualDate").getTextTrim();

                List<JtgkDqckCsFhSjEntity> jtgkDqckCsFhSjEntities= new ArrayList<>();
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
                for(Element bill : bills){
                    JtgkDqckCsFhSjEntity jtgkDqckCsFhSjEntity = new JtgkDqckCsFhSjEntity();
                    //财司返回参数
                    jtgkDqckCsFhSjEntity.setProtocolId(bill.element("ProtocolId") == null ? "" : bill.element("ProtocolId").getTextTrim());//协议主键ID
                    jtgkDqckCsFhSjEntity.setBusiStatus(bill.element("BusiStatus") == null ? "" : bill.element("BusiStatus").getTextTrim());//协议状态 1、生效  2、终止
                    jtgkDqckCsFhSjEntity.setProtocolCode(bill.element("ProtocolCode") == null ? "" : bill.element("ProtocolCode").getTextTrim());//协议号
                    jtgkDqckCsFhSjEntity.setProtocolAccCode(bill.element("ProtocolAccCode") == null ? "" : bill.element("ProtocolAccCode").getTextTrim());//协议账户
                    String CurrType = bill.element("CurrType") == null ? "" : bill.element("CurrType").getTextTrim();//币种 货币码的国际标准（3个大写的英文字母）CNY-人民币
                    if(!StringUtils.isEmpty(CurrType) && CurrType.equals("CNY")){
                        jtgkDqckCsFhSjEntity.setCurrType("RMB");//币种转换，只有人民币需要转换
                    }
                    jtgkDqckCsFhSjEntity.setStartDate(bill.element("StartDate") == null ? "" : bill.element("StartDate").getTextTrim());//协议开始日期
                    jtgkDqckCsFhSjEntity.setExpireDate(bill.element("ExpireDate") == null ? "" : bill.element("ExpireDate").getTextTrim());//协议到期日期
                    jtgkDqckCsFhSjEntity.setIsTranDeposit(bill.element("IsTranDeposit") == null ? "" : bill.element("IsTranDeposit").getTextTrim());//到期自动顺延 “1”是“0”否
                    jtgkDqckCsFhSjEntity.setRate(bill.element("Rate") == null ? new BigDecimal(0) : new BigDecimal(bill.element("Rate").getTextTrim().equals("") ? "0" :bill.element("Rate").getTextTrim()));//存款利率 百分比，10%填10
                    jtgkDqckCsFhSjEntity.setAmt(bill.element("Amt") == null ? new BigDecimal(0) : new BigDecimal(bill.element("Amt").getTextTrim().equals("") ? "0" :bill.element("Amt").getTextTrim()));//协议金额
                    jtgkDqckCsFhSjEntity.setFloatType(bill.element("FloatType") == null ? "" : bill.element("FloatType").getTextTrim());//是否固定利率（浮动类型） 1浮动，2不浮动
                    jtgkDqckCsFhSjEntity.setZjlvdcNlv(bill.element("ZjlvdcNlv") == null ? new BigDecimal(0) : new BigDecimal(bill.element("ZjlvdcNlv").getTextTrim().equals("") ? "0" : bill.element("ZjlvdcNlv").getTextTrim()));//基准利率 百分比，10%填10
                    jtgkDqckCsFhSjEntity.setFloatMethod(bill.element("FloatMethod") == null ? "" : bill.element("FloatMethod").getTextTrim());//浮动方式 0按比例，1按加减点
                    jtgkDqckCsFhSjEntity.setFloatValue(bill.element("FloatValue") == null ? new BigDecimal(0) : new BigDecimal(bill.element("FloatValue").getTextTrim().equals("") ? "0" :bill.element("FloatValue").getTextTrim()));//浮动值 百分比，10%填10

                    //2024/09/19修改
                    jtgkDqckCsFhSjEntity.setProtocolType(bill.element("ProtocolType") == null ? "" : bill.element("ProtocolType").getTextTrim());//协议类型 01-定期存款，03-协定存款
                    jtgkDqckCsFhSjEntity.setProdFactId(bill.element("ProdFactId") == null ? "" : bill.element("ProdFactId").getTextTrim());//存款产品id 对应存款产品同步DEP001接口中的 产品ID 字段
                    jtgkDqckCsFhSjEntity.setIsTranTake(bill.element("IsTranTake") == null ? "" : bill.element("IsTranTake").getTextTrim());//到期是否自动取款 “1”是“0”否。
                    jtgkDqckCsFhSjEntity.setTranDepositType(bill.element("TranDepositType") == null ? "" : bill.element("TranDepositType").getTextTrim());//续存方式 “1”本息“0”本金，到期是否续存为是时必传。
                    jtgkDqckCsFhSjEntity.setInterestAccCode(bill.element("InterestAccCode") == null ? "" : bill.element("InterestAccCode").getTextTrim());//收息账号 财司客户账户，9901开头的内部户

                    String StartAccualDate= bill.element("StartAccualDate") == null ? "" : bill.element("StartAccualDate").getTextTrim();//起息日期
                    jtgkDqckCsFhSjEntity.setStartAccualDate(StringUtils.isEmpty(StartAccualDate) ? null : simpleDateFormat.parse(StartAccualDate));
                    jtgkDqckCsFhSjEntities.add(jtgkDqckCsFhSjEntity);
                }

                jtgkDqckCsFhSjEntities = jtgkDqckCsFhSjEntities.stream()
                        .sorted(Comparator.comparing(JtgkDqckCsFhSjEntity::getStartAccualDate))
                        .collect(Collectors.toList());

                for(JtgkDqckCsFhSjEntity jtgkDqckCsFhSjEntity : jtgkDqckCsFhSjEntities){
                    log.error(jtgkDqckCsFhSjEntity.getProtocolId());
                }
            }

        }catch (Exception e){

            log.error("redisTest1", "redisTest1=：{}",e);
        }
        return Result.ok();
    }

    @PostMapping("/redisTest4")
    public Result redisTest4(@RequestBody JSONObject jsonObject) throws ParseException {
        try{

            String FilePath = "/20241017/TZ20241016599933.pdf";
            //FilePath 全地址 例/20241017/TZ20241016599933.pdf
            String[] FilePaths = FilePath.split("/");
            log.error("文件路径FilePaths：{}",FilePaths);

            //获取文件路径 例/20241017
            String path= FilePath.substring(0,FilePath.indexOf(FilePaths[FilePaths.length-1])-1);
            log.error("文件路径path：{}",path);

            //获取文件名 例TZ20241016599933.pdf
            String file = FilePath.substring(FilePath.indexOf(FilePaths[FilePaths.length-1]),FilePath.length());
            log.error("文件路径file：{}",file);


        }catch (Exception e){

            log.error("redisTest1", "redisTest1=：{}",e);
        }
        return Result.ok();
    }

    @PostMapping("/redisTest5")
    public Result redisTest5(@RequestBody JSONObject jsonObject) throws ParseException {
        try{

            String repData = "<?xml version=\\\"1.0\\\" encoding=\\\"GBK\\\"?> <lcbank> <SysID>GSCloud</SysID> <TuxName>MQReg</TuxName> <ReqDate>20241021</ReqDate> <ReqTime>185305</ReqTime> <List> <Bill> <BillNo>d9174dad-6476-28d3-503d-e4576c01d913</BillNo> <ReqSeqNo>db2b4ef45bc644ce94455004085ebae6</ReqSeqNo><ReqDate>20241021</ReqDate><Result>2</Result><Descript>消息已到达前置</Descript><ExpFlag/><ExpInfo/><CreateTime>2024-10-21T18:53:05.481414</CreateTime></Bill></List></lcbank>";
            Document document = DocumentHelper.parseText(repData);
            Element reroot = document.getRootElement();
            Element head = reroot.element("head");


        }catch (Exception e){

            log.error("redisTest1", "redisTest1=：{}",e);
        }
        return Result.ok();
    }

    /**
     * 获取财司文件
     * @param urlStr ip
     * @param FilePath 文件路径
     * @return
     */
    private InputStream returnBitMap(String urlStr, String FilePath) {
        //拼接文件地址
        String path = "";
        if(FilePath.charAt(0) == '\\'){
            path = urlStr + FilePath;
        }else {
            path = urlStr + "\\" + FilePath;
        }

        URL url = null;
        InputStream is = null;
        try {
            url = new URL(path);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();//利用HttpURLConnection对象,我们可以从网络中获取网页数据.
            conn.setDoInput(true);
            conn.connect();
            is = conn.getInputStream();    //得到网络返回的输入流

        } catch (IOException e) {
            e.printStackTrace();
            log.error("getDepCerDownToCs", "存款证书下载文件错误=：{}",e);
        }

        return is;
    }

    /**
     * InputStream转换为Base64编码的字符串
     * @param inputStream
     * @return
     * @throws IOException
     */
    private  String inputStreamToBase64(InputStream inputStream) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int bytesRead;

        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }

        byte[] bytes = outputStream.toByteArray();
//        return Base64.encodeBase64String(bytes);
        return null;
    }

    public static String convertFileToBase64(File file) {
        if (file == null || !file.exists()) {
            return null;
        }

        try (FileInputStream fileInputStream = new FileInputStream(file)) {
            byte[] fileBytes = new byte[(int) file.length()];
            fileInputStream.read(fileBytes);
            return Base64.getEncoder().encodeToString(fileBytes);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
